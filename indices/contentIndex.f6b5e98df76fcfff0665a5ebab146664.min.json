{"/":{"title":"xLearnCoding","content":"\nxLearnCoding home page.\n\n[[courses/note-taking/Free Course Benefits of note-taking|Free Course: Benefits of note-taking]]\n","lastmodified":"2023-04-05T00:02:09.943289037Z","tags":[]},"/Vim-text-editor":{"title":"Vim text editor","content":"\n![100x100](https://upload.wikimedia.org/wikipedia/commons/thumb/9/9f/Vimlogo.svg/240px-Vimlogo.svg.png)\n\n## What is Vim text editor?\n\nVim is a powerful and popular text editor that is widely used in the software development community. It is known for its efficiency, flexibility, and extensibility. Vim provides advanced editing features, such as syntax highlighting, code completion, macros, and plugins, making it a preferred choice for many programmers and developers.\n\n## How to Install Vim\n\nTo install Vim on your system, follow these steps:\n\n### Windows\n\n1.  Visit the Vim official website at [https://www.vim.org/download.php](https://www.vim.org/download.php).\n2.  Click on the \"PC: MS-DOS and MS-Windows\" link to download the Windows installer.\n3.  Run the downloaded installer and follow the on-screen instructions to complete the installation process.\n\n### macOS\n\n1.  Open a terminal window.\n2.  Install Homebrew, if you haven't already, by following the instructions at [https://brew.sh/](https://brew.sh/).\n3.  Run the following command to install Vim: `brew install vim`\n\n### Linux\n\n1.  Open a terminal window.\n2.  Run the appropriate package manager command for your Linux distribution to install Vim. For example:\n    -   Ubuntu/Debian: `sudo apt-get install vim`\n    -   CentOS/RHEL: `sudo yum install vim`\n    -   Fedora: `sudo dnf install vim`\n\n## Creating a File and Adding Text with Vim\n\nOnce Vim is installed, you can create a new file and start editing it using the following steps:\n\n1.  Open a terminal window.\n2.  Type `vim` followed by the name of the file you want to create, e.g., `vim my_file.txt`, and press Enter.\n3.  Vim will open in normal mode, which is the default mode for navigating and manipulating text. To start inserting text, press `i` to enter insert mode.\n4.  Type in the text you want to add to the file.\n5.  To save the changes, press `Esc` to return to normal mode, then type `:w` and press Enter.\n6.  To exit Vim, type `:q` and press Enter.\n7.  If you want to save the changes and exit Vim in one command, type `:wq` and press Enter.","lastmodified":"2023-04-05T00:02:09.943289037Z","tags":[]},"/content/courses/git/gitlogo.png":{"title":"gitlogo.png","content":"","lastmodified":"2023-04-05T00:02:09.943289037Z","tags":[]},"/content/courses/git/linus.jpeg":{"title":"linus.jpeg","content":"","lastmodified":"2023-04-05T00:02:09.943289037Z","tags":[]},"/content/courses/git/linus.jpg":{"title":"linus.jpg","content":"","lastmodified":"2023-04-05T00:02:09.943289037Z","tags":[]},"/courses/git/Basic-git-terminology":{"title":"Basic git terminology","content":"Although I will provide you with some basic Git terminology here, it can be challenging to fully comprehend these terms without any practical experience. Therefore, I suggest you read this section to get a general idea rather than attempting to understand everything in detail.\n\n\u003e **Repository:** A repository is a collection of files and directories that are tracked by Git.\n\n\u003e **Commit:** A commit is a snapshot of the repository at a specific point in time. Each commit represents a set of changes to the files in the repository.\n\n\u003e **Branch:** A branch is a separate line of development in the repository. Each branch can have its own set of changes and commits, allowing multiple people to work on different features or fixes independently.\n\n\u003e **Merge:** Merging is the process of combining two or more branches of development back into a single branch. This is typically done when a feature or fix is complete and ready to be integrated into the main branch.\n\n\u003e **Pull:** Pulling is the process of retrieving changes from a remote repository and merging them into your local repository.\n\n\u003e **Push:** Pushing is the process of sending your local changes to a remote repository, so that they can be shared with others.\n\n\u003e **Clone:** Cloning is the process of creating a local copy of a remote repository on your machine, so that you can work on it locally.\n\n\u003e **Remote:** A remote is a reference to a remote repository, such as one hosted on GitHub or GitLab.\n\n\u003e **Fork:** Forking is the process of creating a copy of a remote repository on a different account or organization. This allows you to make changes to the repository independently of the original repository, and to submit pull requests back to the original repository if desired.\n\n\nNext: [[Install git]]\n\n\n---\n\n[[courses/git/Mini Course git|Mini Course: git]]\n* Introduction\n\t- [[courses/git/What is git?|What is git?]]\n\t*  [[courses/git/Why is git important?|Why is git important?]]\n\t * [[courses/git/Basic git terminology|Basic git terminology]]\n * Install git and practise\n\t * [[courses/git/Install git|Install git]]\n\t * [[courses/git/git practise|Basic git practise]]\n","lastmodified":"2023-04-05T00:02:09.943289037Z","tags":[]},"/courses/git/Install-git":{"title":"Install git","content":"\nTo begin using Git, you must first install it on your computer. The installation process will differ depending on your operating system. I will guide you through the steps for each operating system, including Windows. It's worth noting that you don't need to change your operating system at this point in your coding learning journey. However, unless you decide to continue with the .Net Framework, I do recommend using Unix-like operating systems such as MacOS or Ubuntu as you progress further in your learning journey.\n\nBefore you start working with Git, it's important to check if it's already installed on your computer. If you're using MacOS or any Linux distribution like Ubuntu, you can check by [[open your terminal|opening the terminal]] (if you're using Windows, you can check by [[open your Command Prompt|opening the Command Prompt]]) and typing,\n\n```bash\ngit --version\n```\n\nIf Git is installed, you will see the version number displayed, for example:\n\n```bash\n\u003e git version 2.30.1 (Apple Git-130)\n```\n\nHowever, if you see an output like \n\n```bash\n\u003e command not found: git\n```\n\nyou'll need to download and install git.\n\nFor ==MacOS users==, you can install Git using Homebrew, a package manager for macOS. To install Homebrew, open the Terminal and run the following command:\n\n```bash\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\nOnce Homebrew is installed, you can install Git by running the following command:\n\n```bash\nbrew install git\n```\n\nFor ==Ubuntu users==, you can install Git using the apt package manager. Open the terminal and run the following command:\n\n```bash\nsudo apt-get update\nsudo apt-get install git\n```\n\nFor ==Windows users==, you can download the Git installer from [the official website](https://git-scm.com/download/win). Once the installer is downloaded, double-click it to start the installation process. Follow the prompts to complete the installation.\n\nOnce you've installed Git, you can check that it's working correctly by running the `git --version` command again in your terminal or command prompt. If the version number is displayed, you're ready to start using Git!\n\nNext: [[courses/git/git practise|Basic git practise]]\n\n---\n\n[[courses/git/Mini Course git|Mini Course: git]]\n* Introduction\n\t- [[courses/git/What is git?|What is git?]]\n\t*  [[courses/git/Why is git important?|Why is git important?]]\n\t * [[courses/git/Basic git terminology|Basic git terminology]]\n * Install git and practise\n\t * [[courses/git/Install git|Install git]]\n\t * [[courses/git/git practise|Basic git practise]]\n","lastmodified":"2023-04-05T00:02:09.943289037Z","tags":[]},"/courses/git/Mini-Course-git":{"title":"Mini Course git","content":"\n![git-logo](courses/git/gitlogo.png)\n\nGit is a powerful version control system that has become a standard tool in software development. It allows developers to track changes to their code over time, collaborate with other developers on a project, and manage multiple versions of their codebase. \n\nLearning Git not only makes it easier to work with others on software projects but also helps individuals to manage their own projects more effectively. \n\nGit skills are in high demand in the tech industry, so learning Git can also enhance one's career prospects. Overall, Git is an essential tool for anyone involved in software development, and learning it is an investment in one's professional development.\n\nNext: [[courses/git/What is git?|What is git?]]\n\n---\n\n[[courses/git/Mini Course git|Mini Course: git]]\n* Introduction\n\t- [[courses/git/What is git?|What is git?]]\n\t*  [[courses/git/Why is git important?|Why is git important?]]\n\t * [[courses/git/Basic git terminology|Basic git terminology]]\n * Install git and practise\n\t * [[courses/git/Install git|Install git]]\n\t * [[courses/git/git practise|Basic git practise]]\n\n\n\n\n","lastmodified":"2023-04-05T00:02:09.943289037Z","tags":[]},"/courses/git/What-is-git":{"title":"What is git?","content":"\n![Linus Torvalds](courses/git/linus.jpeg)\n\nGit is a free and open-source distributed version control system used to manage changes to software code. It was created by Linus Torvalds in 2005 to manage the development of the Linux kernel, and has since become one of the most widely used version control systems in software development. \n\nGit tracks changes to files over time, allowing developers to collaborate on a project without overwriting each other's work. Git also provides a history of changes, making it easy to revert to an earlier version of code if necessary. Git operates locally on a user's computer, but can also be used to manage remote repositories, allowing teams of developers to work together on the same codebase. \n\nOverall, Git is an essential tool for modern software development and is widely used by developers and organizations of all sizes.\n\n\u003e **Fun fact:** Linus Torvalds named Git after himself, as he has a tendency to name his projects after himself, and the word \"get.\" According to Torvalds, the name Git was chosen because it was short, easy to remember, and distinct from other software tools. In a 2007 mailing list post, he described himself as an \"egotistical bastard\" who likes to name his projects after himself, just like he did with Linux. Despite its somewhat humorous origin, Git has become a vital tool for software development, with its use now widespread among developers and organizations alike.\n\nNext: [[Why is git important?]]\n\n---\n\n[[courses/git/Mini Course git|Mini Course: git]]\n* Introduction\n\t- [[courses/git/What is git?|What is git?]]\n\t*  [[courses/git/Why is git important?|Why is git important?]]\n\t * [[courses/git/Basic git terminology|Basic git terminology]]\n * Install git and practise\n\t * [[courses/git/Install git|Install git]]\n\t * [[courses/git/git practise|Basic git practise]]\n","lastmodified":"2023-04-05T00:02:09.943289037Z","tags":[]},"/courses/git/Why-is-git-important":{"title":"Why is git important?","content":"\n![Developers](courses/git/devs.jpg)\n\nGit is an essential tool for software development and collaboration, and its importance lies in its ability to manage version control. Version control is the practice of tracking and managing changes made to a codebase over time, and Git is a [[distributed]] version control system that enables developers to collaborate effectively and manage complex software projects. \n\nWith Git, multiple developers can work on the same codebase simultaneously, each contributing changes independently and resolving conflicts in real-time. Additionally, Git enables developers to track changes, revert to previous versions, and manage branches, allowing them to experiment with new features and bug fixes without affecting the main codebase. \n\nIn short, Git is a critical tool for any software development team, enabling them to work efficiently, collaborate effectively, and manage complex projects with ease.\n\nNext: [[Basic Git terminology]]\n\n---\n\n[[courses/git/Mini Course git|Mini Course: git]]\n* Introduction\n\t- [[courses/git/What is git?|What is git?]]\n\t*  [[courses/git/Why is git important?|Why is git important?]]\n\t * [[courses/git/Basic git terminology|Basic git terminology]]\n * Install git and practise\n\t * [[courses/git/Install git|Install git]]\n\t * [[courses/git/git practise|Basic git practise]]\n","lastmodified":"2023-04-05T00:02:09.943289037Z","tags":[]},"/courses/git/distributed":{"title":"distributed","content":"\n\"distributed\" refers to the fact that every user who clones a git [[repository]] has a complete copy of the entire [[repository]], including its full history of changes. This means that there is no central server that holds the \"official\" version of the [[repository]], and all users have equal access to the same set of files and version history.\n\nEach user's local copy of the [[repository]] can be modified independently, and changes can be shared between different copies of the [[repository]] using git's distributed version control system. Users can push their changes to other users' repositories, and pull changes made by others back into their own local copy.","lastmodified":"2023-04-05T00:02:09.947289333Z","tags":[]},"/courses/git/git-practise":{"title":"git practise","content":"\nIn this section of mini course git, I will cover the very basics of Git. I will start by creating a folder and initializing Git in it. Next, I will create a text file with \"Hello World\" text inside it. I will then commit this file to Git and view it in the commit log. Finally, I will revert back to a previous commit to demonstrate how Git can track changes throughout the journey. This section will provide a practical introduction to Git and its fundamental functionalities.\n\n## Step 1: Create a folder\n\n[[open your terminal|Open your terminal]] or [[open your Command Prompt|command prompt]], navigate to the directory where you want to create your mini Git course folder, and then run the following command to create a new folder:\n\n```bash\nmkdir git-test\n```\n\n\n## Step 2: Navigate into the folder\n\nRun the following command to navigate into the folder you just created:\n\n```bash\ncd git-test\n```\n\nNow run the `ls -lah` command to list and see the files and directories in this folder. Confirm the folder is empty for now.\n\n\n## Step 3: Initialize a Git repository\n\nRun the following command to initialize a new Git repository in the folder:\n\n```bash\ngit init\n```\n\nNow run again the `ls -lah` command and see the `.git` folder created with the `git init` command. All your commit history and changes will be held in this hidden `.git` folder.\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/6OOFo0Nh_SA\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen\u003e\u003c/iframe\u003e\n\n## Step 4: Create a text file with \"Hello World\" text\n\nRun the following command to create a new text file called `hello.txt` with \"Hello World\" text in it:\n\n```bash\necho \"Hello World\" \u003e hello.txt\n```\n\n* You can also use [[Vim text editor]] to create this file and include \"Hello World\" text in it as I am doing in the below video.\n\nYou can check the text in `hello.txt` file with this command:\n\n```bash\ncat hello.txt\n```\n\nOr simply open the file and read the text.\n\n## Step 5: Add and commit the text file\n\nNow run this command to see you have git unstaged changes:\n\n```bash\ngit status\n```\n\nThe filename `hello.txt` is listed in the output with red color. The red color indicates that you haven't added your changes to git yet. \n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/CHC_87kWLGM\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen\u003e\u003c/iframe\u003e\n\nNow run the following commands to add the `hello.txt` file to the Git repository:\n\n```bash\ngit add hello.txt\n```\n\nNow run the `git status` command again and you will see the filename is in green. Now run the following command to commit your changes and add it to the new version of your repository:\n\n```bash\ngit commit -m \"Added hello.txt with Hello World text\"\n```\n\nThe `-m` argument in Git allows you to add a commit message that serves as a reminder of the changes you made. This commit message is essential for keeping track of your changes in the future when you review the commit logs. It's a good practice to provide a meaningful and descriptive commit message that accurately reflects the changes made in the commit. This will help you and your collaborators easily understand the purpose and content of the commit when looking back at the commit history.\n\n## Step 6: Show the commit in the log \n\nRun the following command to show the commit you just made in the Git log:\n\n```bash\ngit log\n```\n\nYou should see the commit message and other details of the commit in the log.\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/-9U9FYyDcIc\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen\u003e\u003c/iframe\u003e\n\n## Step 7: Revert back to the initial state\n\nNow, let's revert back to the initial state where there was no `hello.txt` file. Run the following command to revert the last commit:\n\n```bash\ngit revert HEAD\n```\n\nThis will create a new commit that undoes the changes made in the previous commit, effectively reverting back to the initial state.\n\n## Step 8: Show the revert commit in the log\n\nRun the following command to show the revert commit in the Git log:\n\n```bash\ngit log\n```\n\nYou should be able to observe the details of the revert commit, including the commit message and other relevant information, in the Git log. This showcases the powerful tracking capabilities of Git, which is a key aspect covered in this section of the mini course git. The ability to view and understand the changes made to your codebase through the commit log is an essential skill in effective version control, allowing you to effectively manage and track the history of your project.\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/TzUtIy0cg2Q\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen\u003e\u003c/iframe\u003e\n\n\n## Final note\n\nAs you conclude this last section, you now have a solid understanding of the basics of Git and version control. Git is a powerful tool that allows you to track changes, collaborate with others, and manage your codebase efficiently. With Git, you can easily revert to previous versions, compare changes, and manage multiple branches of your codebase. It's a crucial skill for any software developer, as version control is a fundamental aspect of modern software development workflows.\n\nBy mastering the basics of Git, you have taken a significant step towards becoming a more proficient developer. With continued practice and experience, you can leverage the full power of Git to streamline your development process, collaborate effectively with others, and efficiently manage your codebase. Keep experimenting with Git and incorporating it into your workflow to enhance your coding capabilities.\n\nCongratulations on your progress so far! You now have a solid foundation in Git and version control. Keep exploring and experimenting with Git, and you'll be well on your way to becoming a proficient Git user. Great job! Keep up the good work, and remember, practice makes perfect.\n\nHappy coding!\n\n---\n\n[[courses/git/Mini Course git|Mini Course: git]]\n* Introduction\n\t- [[courses/git/What is git?|What is git?]]\n\t*  [[courses/git/Why is git important?|Why is git important?]]\n\t * [[courses/git/Basic git terminology|Basic git terminology]]\n * Install git and practise\n\t * [[courses/git/Install git|Install git]]\n\t * [[courses/git/git practise|Basic git practise]]\n","lastmodified":"2023-04-05T00:02:09.947289333Z","tags":[]},"/courses/git/repository":{"title":"repository","content":"Repository is a collection of files and directories that are tracked by the git version control system. When you create a new git repository, git starts tracking changes to all the files in the repository, and allows you to easily manage and track changes to your code or other files over time.","lastmodified":"2023-04-05T00:02:09.947289333Z","tags":[]},"/courses/note-taking/Free-Course-Benefits-of-note-taking":{"title":"Free Course Benefits of note-taking","content":"\nAs you start learning programming, you'll quickly realize that there's a lot of information to absorb. From syntax rules to programming concepts and best practices, there's a lot to keep track of. That's where note-taking comes in. By taking notes, you can improve your retention of information, stay organized, and enhance your understanding of programming concepts.\n\n[[courses/git/Mini Course git|Mini Course: git]]\n\n### Benefits of note-taking when learning programming\n\n1. Improved retention of information: When you take notes while learning programming, you're actively engaging with the material. This active engagement helps you remember the information better, which can improve your performance when it comes to applying programming concepts in real-world scenarios.\n\n2. Increased understanding of programming concepts: By taking notes, you're not only memorizing information, but you're also synthesizing it into your own words. This process can help you better understand programming concepts, as you're translating the information into a format that makes sense to you.\n\n3. Organization of information: Programming involves a lot of details, and it can be easy to get overwhelmed with information overload. By taking notes, you can organize the information in a way that makes sense to you. This can help you stay on track with your learning and make it easier to find information when you need it.\n\n### Benefits of using Obsidian for note-taking\n\nObsidian is a note-taking app that's designed for creating interconnected notes. It's especially useful for programmers who want to organize their notes in a way that reflects the relationships between different concepts. Here are some benefits of using Obsidian for note-taking when learning programming:\n\n1. Interconnected notes for better understanding: Obsidian allows you to create links between notes, which can help you see the relationships between different programming concepts. This can help you better understand how different concepts fit together and how they relate to each other.\n\n2. Customizable templates for consistent note-taking: Consistent note-taking is essential for staying organized when learning programming. Obsidian allows you to create customizable templates, which can help you keep your notes organized and consistent.\n\n3. Tagging and search functionality for easy retrieval of information: As your notes grow, it can be difficult to find the information you need. Obsidian allows you to tag notes and use search functionality to quickly find the information you need.\n\n### Benefits of using Git/Github for note-taking\n\nGit and Github are version control tools that are commonly used by programmers. While they're not traditional note-taking tools, they can be useful for organizing your notes when learning programming. Here are some benefits of using Git/Github for note-taking:\n\n1. Version control for tracking changes: When you're learning programming, you'll likely be making a lot of changes to your code and notes. Git allows you to track changes, so you can easily revert to previous versions if needed.\n\n2. Collaboration and sharing: Github allows you to share your notes with others, which can be helpful when you're collaborating on a programming project. You can also use Github to contribute to open-source projects and learn from other programmers.\n\n3. Backup and syncing: Git/Github allows you to backup your notes and sync them across devices. This can be useful for keeping your notes organized and accessible, even if you switch devices or lose your notes.\n\n\n\n","lastmodified":"2023-04-05T00:02:09.947289333Z","tags":[]},"/courses/note-taking/Note-taking-with-Obsidian":{"title":"Note-taking with Obsidian","content":"","lastmodified":"2023-04-05T00:02:09.947289333Z","tags":[]},"/courses/note-taking/Using-Obsidian-with-Git-and-Github":{"title":"Using Obsidian with Git and Github","content":"\nTaking notes is an essential part of many professional fields, especially for those working in the tech industry. Whether you are a programmer, data scientist, or IT professional, taking notes can help you to stay organized, remember important details, and refer back to information later on.\n\n## Why use Git/Github with Obsidian?\n\nWhile Obsidian is a powerful tool for note-taking, it lacks a built-in way to sync notes between devices or collaborate with others. This is where Git and Github come in. Git is a version control system that allows you to track changes to files and collaborate with others. Github is a web-based platform that hosts Git repositories and provides additional collaboration and management tools.\n\nBy using Git and Github with Obsidian, you can:\n\n-   Sync your notes between devices\n-   Collaborate with others on notes\n-   Keep a history of changes to your notes\n-   Easily roll back to previous versions of your notes\n\n\n","lastmodified":"2023-04-05T00:02:09.947289333Z","tags":[]},"/open-your-Command-Prompt":{"title":"open your Command Prompt","content":"\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/bgSSJQolR0E\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen\u003e\u003c/iframe\u003e\n","lastmodified":"2023-04-05T00:02:09.947289333Z","tags":[]},"/open-your-terminal":{"title":"open your terminal","content":"\n==MacOS==\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/QROX039ckO8\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen\u003e\u003c/iframe\u003e\n\n\n==Ubuntu==\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/KKTgw2jFnUg\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen\u003e\u003c/iframe\u003e\n\n","lastmodified":"2023-04-05T00:02:09.947289333Z","tags":[]},"/templates/courses/Free-Course-Benefits-of-note-taking":{"title":"Free Course Benefits of note-taking","content":"* [[courses/note-taking/Free Course Benefits of note-taking|Free Course: Benefits of note-taking]]\n\t* [[Note-taking with Obsidian]]\n\n","lastmodified":"2023-04-05T00:02:09.947289333Z","tags":[]},"/templates/courses/Mini-Course-git":{"title":"Mini Course git","content":"[[courses/git/Mini Course git|Mini Course: git]]\n* Introduction\n\t- [[courses/git/What is git?|What is git?]]\n\t*  [[courses/git/Why is git important?|Why is git important?]]\n\t * [[courses/git/Basic git terminology|Basic git terminology]]\n * Install git and practise\n\t * [[courses/git/Install git|Install git]]\n\t * [[courses/git/git practise|Basic git practise]]\n","lastmodified":"2023-04-05T00:02:09.947289333Z","tags":[]}}